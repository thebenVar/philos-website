# Philos Delicacy Website

purpose:
  A Next.js website for a restaurant named Philo's Delicacy, showcasing its offerings and providing contact information.

features:
  homepage:
    - Hero section with logo, tagline, and CTA buttons (View Menu, Contact Us)
    - Signature Dishes section showcasing featured items with images
    - Gallery section with images, captions, and modal functionality
    - Customer Reviews section with Google Maps reviews and star ratings
    - Modal for enlarged gallery images with close functionality
    - Navigation bar and footer components

structure:
  public:
    logo.png: Restaurant logo
    dishes:
      - pizza.png
      - sushi.png
      - teriyaki_sliced_beef_tenderloin.png
    gallery:
      - beverage_bar.png
      - diavola.png
      - passionfruit_spritzer.png
      - philos_exterior.png
      - potato_wedges.png
      - restaurant.png
      - spicy_crunchy_tuna_roll.png
  src:
    app:
      - globals.css: Global styles
      - layout.tsx: App layout
      - page.tsx: Homepage
      about/page.tsx: About page
      contact/page.tsx: Contact page
      menu/page.tsx: Menu page
    components:
      - Navbar.tsx: Navigation bar
      - Footer.tsx: Footer

dependencies:
  - next.js: 15.4.5
  - react: 18
  - typescript: ^5
  - tailwindcss: ^3.4.0 (downgraded from v4 for compatibility)
  - postcss: For CSS processing
  - autoprefixer: For CSS vendor prefixes

recent_changes:
  session_date: "August 6, 2025"
  implemented:
    - Added Google Maps customer reviews section to homepage
    - Fetched real reviews from Catherine Chacko, Rahul Raj, and Sohail Zakir
    - Implemented star rating display system
    - Set up Tailwind CSS v3.4 (downgraded from v4 for stability)
    - Configured PostCSS and Autoprefixer
    - Created CSS variables design system with primary red theme
    - Updated all components to use modern styling approach
    - Fixed CSS compilation and rendering issues
  
  styling_approach:
    - Primary: Tailwind CSS v3.4 utility classes
    - Secondary: CSS variables for custom colors (:root)
    - Fallback: Inline styles for critical styling
    - Component classes: Custom CSS classes for reusable components
  
  color_scheme:
    primary_red: "#b91c1c"
    primary_red_hover: "#991b1b" 
    accent_gold: "#fbbf24"
    text_colors: ["#1f2937", "#444", "#6b7280"]
  
  issues_resolved:
    - Tailwind CSS v4 compatibility problems with @apply directive
    - PostCSS configuration for proper CSS processing
    - Custom color class recognition
    - Development server memory allocation errors
    - CSS file corruption and recreation

notes:
  - Uses Next.js app directory structure
  - Images are stored in public folder
  - Hybrid styling approach: Tailwind + CSS variables + inline styles
  - Development server runs on port 3000/3001
  - Branch: tailwindcss (active development branch)

next_improvements:
  immediate_priorities:
    - Fix remaining CSS rendering issues (blank page problem)
    - Ensure development server stability
    - Complete Tailwind CSS integration testing
    - Verify all styling classes work properly
  
  code_quality:
    - Extract inline styles to CSS classes/Tailwind utilities
    - Implement TypeScript strict mode
    - Add error boundaries for better error handling
    - Create reusable component library
    - Add prop validation and TypeScript interfaces
  
  functionality:
    - Add contact form with validation
    - Implement menu page with detailed dishes
    - Add reservation system
    - Integrate Google Maps for location
    - Add loading states and skeleton screens
    - Implement SEO optimizations
  
  performance:
    - Optimize images with Next.js Image optimization
    - Implement lazy loading for gallery
    - Add caching strategies
    - Bundle size optimization
    - Core Web Vitals improvements
  
  accessibility:
    - Add ARIA labels and roles
    - Keyboard navigation support
    - Screen reader compatibility
    - Color contrast compliance
    - Focus management for modal
  
  infrastructure:
    - Set up CI/CD pipeline
    - Add automated testing (Jest, Cypress)
    - Implement error monitoring (Sentry)
    - Add analytics tracking
    - Deploy to production (Vercel/Netlify)
  
  features:
    - Multi-language support (English/Malayalam)
    - Online ordering system
    - Customer loyalty program
    - Social media integration
    - Newsletter subscription
    - Admin dashboard for content management
